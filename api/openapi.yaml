openapi: 3.0.3
info:
  title: REChain DAO Platform API
  description: API for decentralized governance and token management
  version: 1.0.0
  contact:
    name: REChain DAO Team
    email: api@rechain-dao.com
    url: https://rechain-dao.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.rechain-dao.com/v1
    description: Production server
  - url: https://staging-api.rechain-dao.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

paths:
  /health:
    get:
      summary: Health check
      description: Check if the API is running
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time

  /auth/login:
    post:
      summary: User login
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
        '400':
          description: Bad request

  /proposals:
    get:
      summary: Get proposals
      description: Retrieve list of governance proposals
      tags:
        - Proposals
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, active, passed, rejected, expired]
      responses:
        '200':
          description: List of proposals
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proposal'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, moderator, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Proposal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [governance, treasury, technical, social]
        status:
          type: string
          enum: [draft, active, passed, rejected, expired]
        proposer:
          $ref: '#/components/schemas/User'
        votingStart:
          type: string
          format: date-time
        votingEnd:
          type: string
          format: date-time
        totalVotes:
          type: integer
        yesVotes:
          type: integer
        noVotes:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
